/*
 * RgeImprovedOneLoopPotential.hpp
 *
 *  Created on: Mar 13, 2014
 *      Author: Ben O'Leary (benjamin.oleary@gmail.com)
 */

#ifndef RGEIMPROVEDONELOOPPOTENTIAL_HPP_
#define RGEIMPROVEDONELOOPPOTENTIAL_HPP_

#include "../../CommonIncludes.hpp"
#include "PotentialFromPolynomialAndMasses.hpp"

namespace VevaciousPlusPlus
{

  class RgeImprovedOneLoopPotential : public PotentialFromPolynomialAndMasses
  {
  public:
    RgeImprovedOneLoopPotential( std::string const& modelFilename,
                            RunningParameterManager& runningParameterManager );
    RgeImprovedOneLoopPotential(
    PotentialFromPolynomialAndMasses const& potentialFromPolynomialAndMasses );
    virtual
    ~RgeImprovedOneLoopPotential();


    // This returns the energy density in GeV^4 of the potential for a state
    // strongly peaked around expectation values (in GeV) for the fields given
    // by the values of fieldConfiguration and temperature in GeV given by
    // temperatureValue.
    virtual double
    operator()( std::vector< double > const& fieldConfiguration,
                double const temperatureValue = 0.0 ) const;

    // This returns the tree-level potential energy density evaluated at the
    // correct scale.
    virtual double
    QuickApproximation( std::vector< double > const& fieldConfiguration,
                        double const temperatureValue = 0.0 )
    { return treeLevelPotential( fieldConfiguration,
                  ( 0.5 * log( RenormalizationScaleSquared( fieldConfiguration,
                                                    temperatureValue ) ) ) ); }

    // This returns the square of the Euclidean distance between the two vacua.
    virtual double
    ScaleSquaredRelevantToTunneling( PotentialMinimum const& falseVacuum,
                                    PotentialMinimum const& trueVacuum ) const;

    // This performs all relevant updates for the new SLHA data except for
    // propagating the push to the set of dependent SlhaUpdatePropagators.
    virtual void UpdateSelfForNewSlha( SlhaManager const& slhaManager );


  protected:
    double logarithmOfMinimumRenormalizationScale;
    double logarithmOfMaximumRenormalizationScale;
    FieldPolynomialsWithScale homotopyContinuationTargetSystem;


    // This returns the square of an appropriate renormalization scale.
    double RenormalizationScaleSquared(
                               std::vector< double > const& fieldConfiguration,
                                   double const temperatureValue = 0.0 ) const;

    // This appends the masses-squared and multiplicity from each
    // MassesSquaredFromMatrix in massSquaredMatrices to
    // massSquaredMatrices, with all functionoids evaluated at the natural
    // exponent of logarithmOfScale.
    void AddMassesSquaredWithMultiplicity(
                               std::vector< double > const& fieldConfiguration,
            std::vector< MassesSquaredCalculator* > const& massSquaredMatrices,
               std::vector< DoubleVectorWithDouble >& massesSquaredWithFactors,
                                         double const logarithmOfScale ) const;

    // This should provide the lines of Python to set the scale according to
    // the field values given by fv in the code generated by WriteAsPython
    // above, in the PotentialFunction function.
    virtual std::string SetScaleInPythonFunction() const;

    virtual PolynomialGradientTargetSystem&
    GetHomotopyContinuationTargetSystem()
    { return homotopyContinuationTargetSystem; }
  };




  // This sets dsbFieldValueInputs based on the SLHA file just read in.
  inline void RgeImprovedOneLoopPotential::UpdateSelfForNewSlha(
                                               SlhaManager const& slhaManager )
  {
    currentMinimumRenormalizationScale = runningParameters.LowestBlockScale();
    squareOfMinimumRenormalizationScale = ( currentMinimumRenormalizationScale
                                        * currentMinimumRenormalizationScale );
    logarithmOfMinimumRenormalizationScale
    = log( currentMinimumRenormalizationScale );
    currentMaximumRenormalizationScale = runningParameters.HighestBlockScale();
    logarithmOfMaximumRenormalizationScale
    = log( currentMaximumRenormalizationScale );
    std::vector< double > fieldOrigin( numberOfFields,
                                       0.0 );
    for( unsigned int fieldIndex( 0 );
         fieldIndex < numberOfFields;
         ++fieldIndex )
    {
      dsbFieldValueInputs[ fieldIndex ]
      = dsbFieldValuePolynomials[ fieldIndex ]( fieldOrigin );
    }
  }

  // This returns the square of an appropriate renormalization scale.
  inline double RgeImprovedOneLoopPotential::RenormalizationScaleSquared(
                               std::vector< double > const& fieldConfiguration,
                                          double const temperatureValue ) const
  {
    double renormalizationScaleSquared( squareOfMinimumRenormalizationScale
                                   + ( temperatureValue * temperatureValue ) );
    for( std::vector< double >::const_iterator
         whichField( fieldConfiguration.begin() );
         whichField < fieldConfiguration.end();
         ++whichField )
    {
      renormalizationScaleSquared += ( (*whichField) * (*whichField) );
    }
    return renormalizationScaleSquared;
  }

  // This appends the masses-squared and multiplicity from each
  // MassesSquaredFromMatrix in massSquaredMatrices to
  // massSquaredMatrices, with all functionoids evaluated at the last scale
  // which was used to update them.
  inline void
  RgeImprovedOneLoopPotential::AddMassesSquaredWithMultiplicity(
                               std::vector< double > const& fieldConfiguration,
            std::vector< MassesSquaredCalculator* > const& massSquaredMatrices,
               std::vector< DoubleVectorWithDouble >& massesSquaredWithFactors,
                                          double const logarithmOfScale ) const
  {
    for( std::vector< MassesSquaredCalculator* >::const_iterator
         whichMatrix( massSquaredMatrices.begin() );
         whichMatrix < massSquaredMatrices.end();
         ++whichMatrix )
    {
      massesSquaredWithFactors.push_back(
             std::make_pair( (*whichMatrix)->MassesSquared( fieldConfiguration,
                                                            logarithmOfScale ),
                                      (*whichMatrix)->MultiplicityFactor() ) );
    }
  }

  // This returns the square of the Euclidean distance between the two vacua.
  inline double RgeImprovedOneLoopPotential::ScaleSquaredRelevantToTunneling(
                                           PotentialMinimum const& falseVacuum,
                                     PotentialMinimum const& trueVacuum ) const
  {
    return falseVacuum.SquareDistanceTo( trueVacuum );
  }

  // This should provide the lines of Python to set the scale according to
  // the field values given by fv in the code generated by WriteAsPython
  // above, in the PotentialFunction function.
  inline std::string
  RgeImprovedOneLoopPotential::SetScaleInPythonFunction() const
  {
    // placeholder:
    /**/std::cout << std::endl
    << "Placeholder: "
    << "RgeImprovedOneLoopPotential::SetScaleInPythonFunction()";
    std::cout << std::endl;
    return std::string();/**/
  }

} /* namespace VevaciousPlusPlus */
#endif /* RGEIMPROVEDONELOOPPOTENTIAL_HPP_ */
