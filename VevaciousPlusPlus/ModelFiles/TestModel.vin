<VevaciousModelFile>

<ModelFileDetails
 ModelName="PhiFourthTest"
 VevaciousMajorVersion="2" VevaciousMinorVersion="0" />

<!-- All variables which are NOT explicitly given in AllowedNonZeroVariables
     are assumed to be zero. This allows for a model to be given in terms of
     all possible scalar fields, while slight edits to AllowedNonZeroVariables
     can then specify which fields are assumed to be zero (by omission from
     AllowedNonZeroVariables). -->
<AllowedNonZeroVariables>

  <!-- The fields should be given as a newline-separated list of character
       strings. Field names should be strings of alphanumeric characters but
       may not begin with a numeric digit, and may also include a
       comma-separated list of integers in square brackets after the
       alphanumeric string (spaces allowed within the square brackets, but
       nowhere else). The names are also case-sensitive.
       Examples:
       phi
       phi1 (is distinct from just phi)
       h
       H (is distinct from h)
       stopleftvev
       vSel[3]
       MatrixOfFields[4, 2]
       f1g3
       and so on. -->
  <FieldVariables>
    phi
  </FieldVariables>

  <!-- The renormalization scale for running couplings is chosen to be Q such
       that Q^2 = M^2 + sum of squares of field values of the field
       configuration, where M is given here (in GeV). The default is the mass
       of the Z boson. -->
  <MinimumRenormalizationScale>
    91.1876
  </MinimumRenormalizationScale>
  
  <!-- Every block that will be read in from an SLHA file should be enumerated
       here in a newline-separated list. Block names are NOT case-sensitive
       (following the SLHA conventions). Any blocks not explicitly mentioned
       here will be treated as zero in the rest of the model file!
       N.B.: Only a subset of possible SLHA-style blocks are permitted: those
       where each line is of the form of a set of integer indices followed by
       a single floating-point number. The number of indices is not limited.
       For a block named BLAH, the elements are referred to in this model file
       as BLAH[ 1 ] or BLAH[ 2, 3 ] or BLAH[4,5,6] and so on for blocks with
       1, 2 or 3 indices and so on. Also, blocks which are just a single line
       with a single floating-point number are permitted, but must be referred
       to with empty square brackets: BLAH[] (e.g. the ALPHA block of the
       original SUSY Les Houches Accords).
       Aliases for the blocks may also be given here, by NAME = alias. For
       example, GAUGE = g would both denote that the GAUGE block is to be read
       in from the SLHA file, and also that g[1] in the rest of this model file
       is equivalent to GAUGE[1] and so on. -->
  <SlhaBlocks>
    GAUGE = g
    YU=y
    HMIX
    PHIFOURTH
    LOOPPHIFOURTH
  </SlhaBlocks>

  <!-- Every other non-zero parameter should appear here, each on a separate
       line, in the form
       (variable name)=(type of variable)[(list of relevant arguments)]
       and if a parameter references another parameter, it MUST come further
       down the list than the referenced parameter. (All elements of SLHA
       blocks from SlhaBlocks may be referenced here but only through first
       creating parameters of the SLHAELEMENT type.) Constant numbers may be
       used in places of aliases.
       Allowed types:
       SLHAELEMENT: takes SLHA block name or alias, then set of indices,
                    e.g. SLHAELEMENT[YU, 2, 3]
                    
       Binary operations: all these take 2 aliases as arguments,
                          e.g. DIVIDE[ blah, bloop ] or PLUS[ 2.0, foo ]
       PLUS: adds the arguments
       MINUS: subtracts the 2nd argument from the 1st
       TIMES: multiplies the arguments
       DIVIDE: divides the 1st argument by the 2nd
       POW: raises the 1st argument to the power of the 2nd
       
       Unary operations: all these take 1 alias as the arguement,
                         e.g. ATAN[ bar ] or SQRT[ 6 ]
       SQRT: square root
       EXP: e to the power of the argument
       LOG: logarithm in base e
       TAN: tangent
       SIN: sine
       COS: cosine
       TAN: tangent
       ASIN: arcsine (inverse sine)
       ACOS: arccosine (inverse cosine)
       ATAN: arctangent (inverse tangent)
       SINH: hyperbolic sine
       COSH: hyperbolic cosine
       TANH: hyperbolic tangent -->
  <DerivedParameters>
    g1=SLHAELEMENT[g,1]
    ycharmtop=SLHAELEMENT[YU, 2, 3]
    lambda = SLHAELEMENT[ PHIFOURTH, 1 ]
    looplambda = SLHAELEMENT[ LOOPPHIFOURTH, 1 ]
    deltalambda = MINUS[ looplambda, lambda ]
    tb=SLHAELEMENT[HMIX,2]
    mASq = SLHAELEMENT[HMIX, 4]
    beta=ATAN[ tb ]
    cb=COS[ beta ]
    sb=SIN[ beta ]
    sbcb = TIMES[ sb, cb ]
    Bmu=TIMES[ sbcb, mASq ]
    Sqrt2=POW[ 2.0, 0.5 ]
    tbSq=POW[ tb, 2 ]
    tbSqPlusOne=PLUS[ tbSq, 1.0 ]
    sbcbAlt = DIVIDE[tb, tbSqPlusOne]
  </DerivedParameters>

</AllowedNonZeroVariables>

<!-- Polynomials (which make up the tree-level potential and also the elements
     of the mass-squared matrices) are always expanded out, have no brackets,
     and are interpreted with the standard operator precedence. Raising x to
     the nth power (where n is a natural number) can be written using a caret:
     x^n, for example. This does not work for constant numbers! Division is not
     possible, unfortunately, none of '/', 'Ö', nor "^-" are permitted: please
     expand out e.g. 4.0/8.0 as 0.5 or use DerivedParameters for such things as
     a ratio of parameters from an SLHA file. -->
<!-- I need to explain the form of TreeLevelPotential...-->
<TreeLevelPotential>
  .25 * lambda * phi^4 - 50e-002 * Bmu * phi^2
</TreeLevelPotential>

<!-- I need to explain the form of LoopCorrections...-->
<LoopCorrections RenormalizationScheme="MSBAR" GaugeFixing="LANDAU" >

  <!-- I need to explain the form of ExtraPolynomialPart...-->
  <ExtraPolynomialPart>
    .25e-00 * deltalambda * phi^4 + 2.0E-1 * unknown[ 1, 2, 3 ] * phi^2
  </ExtraPolynomialPart>

  <!-- I need to explain the form of MassSquaredMatrix...-->
  <MassSquaredMatrix SpinType="ScalarBoson" MultiplicityFactor="1" >
    12.0 * g1^2 * phi^2 - 2.0 * Bmu
  </MassSquaredMatrix>
  <MassSquaredMatrix SpinType="WeylFermion" MultiplicityFactor="6" >
    y[ 2, 2 ]^2 * phi^2 + y[ 2, 3 ]^2 * phi^2
    y[ 2, 2 ] * y[ 3, 2 ] * phi^2 + y[ 2, 3 ] * y[ 3, 3 ] * phi^2
    y[ 3, 2 ] * y[ 2, 2 ] * phi^2 + y[ 3, 3 ] * y[ 2, 3 ] * phi^2
    y[ 2, 3 ]^2 * phi^2 + y[ 3, 3 ]^2 * phi^2
  </MassSquaredMatrix>
  <MassSquaredMatrix SpinType="GaugeBoson" MultiplicityFactor="1" >
    Sqrt2^2 * 0.25 * g[1]^2 * phi^2
  </MassSquaredMatrix>

</LoopCorrections>

</VevaciousModelFile>